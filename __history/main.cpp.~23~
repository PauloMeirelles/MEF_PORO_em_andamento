#pragma hdrstop
#pragma argsused


#include <iostream>
#include "main.h"
#include <math.h>

//#ifdef _WIN32
#include <tchar.h>
//#else
typedef char _TCHAR;
#define _tmain main
//#endif

#include "main.h"

int _tmain(int argc, _TCHAR* argv[])
{


    // insert code here...
    //int main (int argc, const char * argv[])
	//{
        int k=0;
		std::string EndCON="E:\-----MESTRADO_IMPORTANTE-----\CODIGOS\outros\08_12_2021\MEF_PORO_ATT_WILSON\PFEM_Poro_Atual/config.txt";
		std::cout << std::setiosflags(std::ios::fixed) << std::setprecision(7);
		tvNo No;
		tvEl El;
        tvMa Ma;
		tvQuadratura Qua;
		CCo Co(EndCON);
        int ngl;
		//Apaga os arquivos a serem preenchidos com os relatorios...
		std::string NArq1; NArq1.append(Co.r_ArqREL()); //NArq1.append("resultados/Saida_Triang.txt");
		std::ofstream Sai1;   Sai1.open(NArq1.c_str()); ///< número de nós e matriz a ser invertida
		Sai1.close();
		Le_Quadraturas(Qua,Co.r_ArqQUA());
		Le_Nos(No,Co.r_ArqNOS());
		Le_CC(No,Co.r_ArqCC(),ngl);

        std::cout << "Fim" << std::endl;
        return 0;
	//}
}



void Gera_VTK_69(CCo& Co, tvNo& No, tvEl& El, const int& ite)
{
    std::vector < std::vector < int > > ind;
    ind.resize(2, std::vector < int > (2,0.0));
    ind[0][0]=0; ind[0][1]=2;
    ind[1][0]=3; ind[1][1]=1;
    std::string NArq2; NArq2.append(Co.r_ArqVTK());
    NArq2.insert(NArq2.find(".vtk"),intToString(ite));
    std::ofstream Sai2; Sai2.open(NArq2.c_str()); Sai2.close();
    Sai2.open(NArq2.c_str(),std::fstream::in | std::fstream::out | std::fstream::app);     ///< Dados Calculado
    //  int NEL; NEL=0;
    //  int NNT; NNT=0;
    //  for (int i=0; i<El.size(); i++)
    //  {
    //    NEL+=El[i].NTriL(  El[i].r_Pe()  );
    //    NNT+=El[i].r_NN();
    //  }
    Sai2 << "# vtk DataFile Version 2.0" << std::endl;
    Sai2 << "FEM, Created by Wutzow" << std::endl;
    Sai2 << "ASCII" << std::endl;
    Sai2 << "DATASET UNSTRUCTURED_GRID" << std::endl;
    Sai2 << "POINTS " << No.size() << " Float64" << std::endl;
    for (int i=0; i<No.size(); i++)
    {
        Sai2 << No[i].r_X(1,0) << " " << No[i].r_X(1,1) << " " << 0.0 << std::endl;
    }
    Sai2 << std::endl;
    Sai2 << "CELLS " << El.size() << " " << El.size()*11 << std::endl;
    for (int i=0; i<El.size(); i++)
    {
        Sai2 << "10";
		Sai2 << " " << El[i].r_No(0)->r_NumberNo();
		Sai2 << " " << El[i].r_No(6)->r_NumberNo();
		Sai2 << " " << El[i].r_No(9)->r_NumberNo();
		Sai2 << " " << El[i].r_No(1)->r_NumberNo();
		Sai2 << " " << El[i].r_No(3)->r_NumberNo();
		Sai2 << " " << El[i].r_No(7)->r_NumberNo();
		Sai2 << " " << El[i].r_No(8)->r_NumberNo();
		Sai2 << " " << El[i].r_No(5)->r_NumberNo();
		Sai2 << " " << El[i].r_No(2)->r_NumberNo();
		Sai2 << " " << El[i].r_No(4)->r_NumberNo();
        Sai2 << std::endl;
    }
    Sai2 << std::endl;
    Sai2 << "CELL_TYPES " << El.size() << std::endl;
    for (int i=0; i<El.size(); i++)
    {
        Sai2 << "69" << std::endl;
    }
    Sai2 << std::endl;
    Sai2 << "CELL_DATA "<< El.size() << std::endl;
    Sai2 << "POINT_DATA " << No.size() << std::endl;
    Sai2 << "VECTORS Y" <<  " Float64" << std::endl;
    for (int i=0; i<No.size(); i++)
    {
        Sai2 << No[i].r_X(1,0) << " " << No[i].r_X(1,1) << " 0.0" << std::endl;
    }
    Sai2 << std::endl;
    Sai2 << "CELL_DATA "<< El.size() << std::endl;
    Sai2 << "POINT_DATA " << No.size() << std::endl;
    Sai2 << "VECTORS U" << " Float64" << std::endl;
    for (int i=0; i<No.size(); i++)
    {
        Sai2 << No[i].r_X(1,0)-No[i].r_X(0,0) << " " << No[i].r_X(1,1)-No[i].r_X(0,1) << " 0.0" << std::endl;
    }
    Sai2 << std::endl;

     Sai2 << "CELL_DATA "<< El.size() << std::endl;
     Sai2 << "POINT_DATA " << No.size() << std::endl;
     Sai2 << "TENSORS E Float64" << std::endl;
     for (int i=0; i<No.size(); i++)
     {
       Sai2 << No[i].r_no_E(ind[0][0]) << " " << No[i].r_no_E(ind[0][1]) << " " << " 0.00" << std::endl;
       Sai2 << No[i].r_no_E(ind[1][0]) << " " << No[i].r_no_E(ind[1][1]) << " " << " 0.00" << std::endl;
       Sai2 << "0.00"                  << " " << "0.00"                  << " " << " 0.00" << std::endl;
       Sai2 << std::endl;
     }
     Sai2 << std::endl;

    Sai2 << "CELL_DATA "<< El.size() << std::endl;
    Sai2 << "POINT_DATA " << No.size() << std::endl;
    Sai2 << "TENSORS S Float64" << std::endl;
    for (int i=0; i<No.size(); i++)
    {
        Sai2 << No[i].r_no_S(ind[0][0]) << " " << No[i].r_no_S(ind[0][1]) << " " << " 0.00" << std::endl;
        Sai2 << No[i].r_no_S(ind[1][0]) << " " << No[i].r_no_S(ind[1][1]) << " " << " 0.00" << std::endl;
        Sai2 << "0.00"                  << " " << "0.00"                  << " " << " 0.00" << std::endl;
        Sai2 << std::endl;
    }
    Sai2 << std::endl;

     Sai2 << "CELL_DATA "<< El.size() << std::endl;
     Sai2 << "POINT_DATA " << No.size() << std::endl;
     Sai2 << "SCALARS ue float" << std::endl;
     Sai2 << "LOOKUP_TABLE default" << std::endl;
     for (int i=0; i<No.size(); i++)
     {
     Sai2 << No[i].r_no_ue() << std::endl;
     }
    Sai2 << std::endl;
    Sai2.close();
}

